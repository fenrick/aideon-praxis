name: Release Build (Dry-Run)

on:
  push:
    branches: [main]
  workflow_dispatch: {}

jobs:
  app:
    name: App Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v6
        with:
          node-version: '24'
      - name: Install Flatpak tooling (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends flatpak flatpak-builder xz-utils
      - name: Enable Corepack
        run: corepack enable || true
      - name: Prepare Yarn 4
        run: corepack prepare yarn@4.10.3 --activate || true
      - name: Yarn version
        run: yarn --version
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            packages/worker/pyproject.toml
            packages/worker/requirements-dev.lock
      - name: Enable Corepack (non-fatal)
        run: corepack enable
        continue-on-error: true
      - name: Install JS dependencies
        run: yarn install --immutable
      - name: JS Format Check
        run: yarn format:check
      - name: JS Lint
        run: yarn lint
      - name: JS Typecheck
        run: yarn typecheck
      - name: JS Tests
        run: yarn test
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install worker dev tools (locked)
        if: ${{ hashFiles('packages/worker/requirements-dev.lock') != '' }}
        run: |
          cd packages/worker
          pip install -r requirements-dev.lock
          pip install -e .[dev]
      - name: Ensure PyInstaller
        run: pip install pyinstaller
      - name: Python Lint (ruff+black --check)
        run: yarn py:lint
      - name: Python Tests
        run: yarn py:test
      - name: Build worker binary (PyInstaller)
        run: pyinstaller -F -n aideon-worker -p packages/worker/src packages/worker/src/aideon_worker/cli.py
      - name: Stage worker binary into app
        shell: bash
        run: |
          mkdir -p packages/app/extra/worker
          if [[ "$RUNNER_OS" == "Windows" ]]; then cp dist/aideon-worker.exe packages/app/extra/worker/; else cp dist/aideon-worker packages/app/extra/worker/; fi
      - run: yarn workspace @aideon/app build
      - name: Package (no publish)
        run: yarn workspace @aideon/app exec electron-builder -c electron-builder.yml --publish=never
      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: packages/app/dist/pack/**

  worker:
    name: Worker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v6
        with:
          node-version: '24'
      - name: Enable Corepack (non-fatal)
        run: corepack enable || true
      - name: Prepare Yarn 4
        run: corepack prepare yarn@4.10.3 --activate || true
      - name: Yarn version
        run: yarn --version
      - name: Install JS dependencies
        run: yarn install --immutable
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            packages/worker/pyproject.toml
            packages/worker/requirements-dev.lock
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install worker dev tools (locked)
        if: ${{ hashFiles('packages/worker/requirements-dev.lock') != '' }}
        run: |
          cd packages/worker
          pip install -r requirements-dev.lock
          pip install -e .[dev]
      - name: Ensure build backend
        run: pip install build
      - name: Python Lint (ruff+black --check)
        run: yarn py:lint
      - name: Python Tests
        run: yarn py:test
      - name: Build distributions
        working-directory: packages/worker
        run: python -m build
      - name: Upload dists
        uses: actions/upload-artifact@v4
        with:
          name: worker-dists
          path: packages/worker/dist/*
