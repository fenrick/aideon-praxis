name: Package Artifacts

on:
  release:
    types: [published]

jobs:
  package:
    name: Build Installers (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: '24'
      - name: Install Flatpak tooling (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends flatpak flatpak-builder xz-utils
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            packages/worker/pyproject.toml
            packages/worker/requirements-dev.lock
      - name: Enable Corepack
        run: corepack enable || true
      - name: Prepare Yarn 4
        run: corepack prepare yarn@4.10.3 --activate || true
      - name: Yarn version
        run: yarn --version
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install worker dev tools (locked)
        if: ${{ hashFiles('packages/worker/requirements-dev.lock') != '' }}
        run: |
          cd packages/worker
          pip install -r requirements-dev.lock
          pip install -e .[dev]
      - name: Ensure PyInstaller
        run: pip install pyinstaller
      - name: Python Lint (ruff+black --check)
        run: yarn py:lint
      - name: Python Tests
        run: yarn py:test
      - name: Build worker binary (PyInstaller)
        run: pyinstaller -F -n aideon-worker -p packages/worker/src packages/worker/src/aideon_worker/cli.py
      - name: Stage worker binary into app
        shell: bash
        run: |
          mkdir -p packages/app/extra/worker
          if [[ "$RUNNER_OS" == "Windows" ]]; then cp dist/aideon-worker.exe packages/app/extra/worker/; else cp dist/aideon-worker packages/app/extra/worker/; fi
      - name: Build app code
        run: yarn workspace @aideon/app build
      - name: Package with electron-builder
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: 'true'
        shell: bash
        run: |
          VERSION=${{ github.event.release.tag_name }}
          yarn workspace @aideon/app exec electron-builder \
            -c electron-builder.yml \
            -c.extraMetadata.version=${VERSION} \
            --publish always

  worker:
    name: Build & Attach Worker Dists
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: '24'
      - name: Enable Corepack (non-fatal)
        run: corepack enable || true
      - name: Prepare Yarn 4
        run: corepack prepare yarn@4.10.3 --activate || true
      - name: Yarn version
        run: yarn --version
      - name: Install JS dependencies
        run: yarn install --immutable
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            packages/worker/pyproject.toml
            packages/worker/requirements-dev.lock
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install worker dev tools (locked)
        if: ${{ hashFiles('packages/worker/requirements-dev.lock') != '' }}
        run: |
          cd packages/worker
          pip install -r requirements-dev.lock
          pip install -e .[dev]
      - name: Ensure build backend
        run: pip install build
      - name: Python Lint (ruff+black --check)
        run: yarn py:lint
      - name: Python Tests
        run: yarn py:test
      - name: Build dists
        working-directory: packages/worker
        run: python -m build
      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            packages/worker/dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
