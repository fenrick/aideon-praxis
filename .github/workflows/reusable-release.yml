name: Reusable Release

on:
  workflow_call:
    inputs:
      publish:
        description: 'Publish artifacts to GitHub Releases (electron-builder)'
        required: false
        type: boolean
        default: false
      os-matrix:
        description: 'JSON array of OS runners'
        required: false
        type: string
        default: '["ubuntu-latest","macos-latest","windows-latest"]'

env:
  NODE_VERSION: '24'
  PNPM_VERSION: '10.19.0'

permissions:
  contents: write

jobs:
  package_app:
    name: Package App (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(inputs['os-matrix']) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm ${{ env.PNPM_VERSION }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-store-app
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store-app.outputs.STORE_PATH }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-

      - name: Install JS dependencies
        run: pnpm install --frozen-lockfile

      - name: JS Format Check
        run: pnpm run node:format:check

      - name: JS Lint
        run: pnpm run node:lint

      - name: JS Typecheck
        run: pnpm run node:typecheck

      - name: JS Tests
        run: pnpm run node:test

      - name: Build app code
        run: pnpm --filter @aideon/app build

      - name: Package app
        if: ${{ !inputs.publish }}
        run: pnpm --filter @aideon/app exec electron-builder -c electron-builder.yml --publish=never

      - name: Upload installers
        if: ${{ !inputs.publish }}
        uses: actions/upload-artifact@v5
        with:
          name: app-${{ runner.os }}
          path: app/desktop/dist/pack/**

      - name: Package and publish app
        if: ${{ inputs.publish }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: 'true'
        run: pnpm --filter @aideon/app exec electron-builder -c electron-builder.yml --publish always
