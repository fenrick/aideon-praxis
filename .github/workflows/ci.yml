name: Build

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    name: Checks (lint • type • test • cov)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Node toolchain
      - uses: actions/setup-node@v6
        with:
          node-version: '24'
      - name: Enable Corepack and Yarn 4
        run: |
          corepack enable || true
          corepack prepare yarn@4.10.3 --activate || true
          yarn --version
      - name: Cache Yarn (Yarn 4 local cache)
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --immutable
      # Commit message linting — non-blocking for Dependabot
      - name: Commitlint PR title (non-blocking for Dependabot)
        if: ${{ github.event_name == 'pull_request' }}
        uses: wagoid/commitlint-github-action@v6
        continue-on-error: ${{ github.actor == 'dependabot[bot]' || startsWith(github.head_ref || '', 'dependabot/') }}
        with:
          configFile: commitlint.config.cjs
      - name: Commitlint commits on push (non-blocking for Dependabot)
        if: ${{ github.event_name == 'push' }}
        uses: wagoid/commitlint-github-action@v6
        continue-on-error: ${{ github.actor == 'dependabot[bot]' || startsWith(github.ref_name || '', 'dependabot/') }}
        with:
          configFile: commitlint.config.cjs

      # JS/TS checks
      - name: Prettier check
        run: yarn format:check
      - run: yarn lint
      - run: yarn typecheck
      - run: yarn test:coverage

      # Python toolchain and checks (uv-only)
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: latest
      - name: Cache uv and virtualenvs
        uses: actions/cache@v4
        with:
          path: |
            .venv
            packages/worker/.venv
            ~/.cache/uv
          key: ${{ runner.os }}-uv-3.13-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-3.13-
      - name: Sync Python toolchain (uv)
        run: uv sync --all-groups
      - name: Python Lint (ruff + black --check via uv)
        run: yarn py:lint
      - name: Python Typecheck (mypy + pyright)
        run: |
          yarn py:sync
          yarn py:typecheck
          yarn py:pyright
      - name: Python Security (bandit)
        run: yarn py:sec
      - name: Python Dead code (vulture)
        run: yarn py:deadcode
      - name: Python Tests + Coverage (pytest-cov)
        run: yarn py:test:cov

      # Publish coverage artifacts for downstream jobs (e.g., Sonar)
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          if-no-files-found: warn
          retention-days: 7
          path: |
            coverage/**
            **/lcov.info
            packages/worker/coverage.xml

  release:
    name: Semantic Release
    needs: [checks]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v6
        with:
          node-version: '24'
      - run: corepack enable || true
      - name: Cache Yarn (Yarn 4 local cache)
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sonar:
    name: SonarQube Analysis
    needs: [checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Gate – enable only if SONAR_TOKEN is set
        id: gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -z "${SONAR_TOKEN}" ]; then
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            echo "Sonar token missing; skipping sonar job."
          else
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Download coverage artifacts
        uses: actions/download-artifact@v5
        if: ${{ steps.gate.outputs.enabled == 'true' }}
        with:
          name: coverage
          path: .
      - name: SonarQube Scan
        if: ${{ steps.gate.outputs.enabled == 'true' }}
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL != '' && secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
      - name: Sonar Quality Gate
        if: ${{ steps.gate.outputs.enabled == 'true' }}
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
